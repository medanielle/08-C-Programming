#include <gmock/gmock.h>

#include "TestCode.h"


static int offset[] = {
	0,
	24,
	51,
	71,
	160,
};

static int list[] = {
	24,
	27,
	20,
	89,
};

static unsigned char buf[] = {
	0xe8, 0xd0, 0xd2, 0xe6, 0x40, 0xd2, 0xe6, 0x40, 0xe8, 0xd0, 0xca, 0x40, 0xcc, 0xd2, 0xe4, 0xe6, 0xe8, 0x40, 0xe6, 0xe8, 0xe4, 0xd2, 0xdc, 0xce,
	0xe6, 0xca, 0xc6, 0xde, 0xdc, 0xc8, 0x40, 0xe6, 0xe8, 0xe4, 0xd2, 0xdc, 0xce, 0x58, 0x40, 0xe6, 0xde, 0x40, 0xe8, 0xca, 0xe4, 0xe4, 0xd2, 0xc4, 0xd8, 0xca, 0x5c,
	0xd8, 0xc2, 0xe6, 0xe8, 0x58, 0x40, 0xc4, 0xea, 0xe8, 0x40, 0xdc, 0xde, 0xe8, 0x40, 0xd8, 0xca, 0xc2, 0xe6, 0xe8, 0x42,
	0xa8, 0xd0, 0xd2, 0xe6, 0x40, 0xee, 0xd2, 0xd8, 0xd8, 0x40, 0xc6, 0xc2, 0xea, 0xe6, 0xca, 0x40, 0xc4, 0xc2, 0xc8, 0x40, 0xe6, 0xe8, 0xea, 0xcc, 0xcc, 0x40, 0xe8, 
	0xde, 0x40, 0xd0, 0xc2, 0xe0, 0xe0, 0xca, 0xdc, 0x58, 0x40, 0x92, 0x4e, 0xda, 0x40, 0xe4, 0xca, 0xc2, 0xd8, 0xd8, 0xf2, 0x40, 0xe0, 0xe4, 0xca, 0xe8, 0xe8, 0xf2, 
	0x40, 0xc6, 0xca, 0xe4, 0xe8, 0xc2, 0xd2, 0xdc, 0x40, 0xde, 0xcc, 0x40, 0xe8, 0xd0, 0xc2, 0xe8, 0x5c, 0x40, 0x94, 0xea, 0xe6, 0xe8, 0x40, 0xe6, 0xde, 0x40, 0xf2, 
	0xde, 0xea, 0x40, 0xd6, 0xdc, 0xde, 0xee, 0x5c,

};

static char* unpackedBuf[] = {
	"this is the first string",
	"second string, so terrible.",
	"last, but not least!",
};


TEST(TestSetTwo, UnpackStringsTest_deobfuscate_first)
{

	int index = 0;
	unsigned char buffer[MAX_PATH + 1] = { 0 };
	char finbuf[MAX_PATH + 1] = { 0 };

	getRawString(index, buf, list[index], buffer);
	ASSERT_EQ(ERROR_SUCCESS, unpackString(finbuf, MAX_PATH, buffer, list[index]));
	ASSERT_EQ(ERROR_SUCCESS, strcmp(finbuf, unpackedBuf[index]));

}

TEST(TestSetTwo, UnpackStringsTest_bad_input)
{
	int index = 0;
	unsigned char buffer[MAX_PATH + 1] = { 0 };
	char finbuf[MAX_PATH + 1] = { 0 };
	getRawString(index, buf, list[index], buffer);

	ASSERT_EQ(ERROR_INVALID_PARAMETER, unpackString(NULL, MAX_PATH, buffer, list[index]));
	ASSERT_EQ(ERROR_INVALID_PARAMETER, unpackString(finbuf, MAX_PATH, NULL, list[index]));
}


TEST(TestSetTwo, UnpackStringsTest_deobfuscate_second)
{
	int index = 1;
	unsigned char buffer[MAX_PATH + 1] = { 0 };
	char finbuf[MAX_PATH + 1] = { 0 };
	getRawString(offset[index], buf, list[index], buffer);
	ASSERT_EQ(ERROR_SUCCESS, unpackString(finbuf, MAX_PATH, buffer, list[index]));
	ASSERT_EQ(ERROR_SUCCESS, strcmp(finbuf, unpackedBuf[index]));
	//"second string, so terrible.",

}


TEST(TestSetTwo, UnpackStringsTest_deobfuscate_third)
{
	int index = 2;
	unsigned char buffer[MAX_PATH + 1] = { 0 };
	char finbuf[MAX_PATH + 1] = { 0 };
	getRawString(offset[index], buf, list[index], buffer);
	ASSERT_EQ(ERROR_SUCCESS, unpackString(finbuf, MAX_PATH, buffer, list[index]));
	ASSERT_EQ(ERROR_SUCCESS, strcmp(finbuf, unpackedBuf[index]));

}

TEST(TestSetTwo, UnpackedStringsTest_bad_copy)
{
	char finbuf[10] = { 0 };
	int index = 3;
	unsigned char buffer[MAX_PATH + 1] = { 0 };

	getRawString(offset[index], buf, list[index], buffer);
	ASSERT_EQ(ERROR_INVALID_PARAMETER, unpackString(finbuf, 10, buffer, MAX_PATH));
}